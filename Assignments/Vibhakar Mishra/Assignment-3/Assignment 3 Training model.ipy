from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,
                                 zoom_range=0.2,horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)
xtrain=train_datagen.flow_from_directory(r'Flowers-Dataset/flowers/train',
                                         target_size=(64, 64),
                                          batch_size=100,                                           
                                          class_mode='categorical'
                                         )
Found 4317 images belonging to 5 classes.
xtest=test_datagen.flow_from_directory(r'Flowers-Dataset/flowers/test',
                                          target_size=(64, 64),
                                          batch_size=100,                                           
                                          class_mode='categorical')
Found 27 images belonging to 5 classes.
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Convolution2D,MaxPool2D,Flatten,Dense
model = Sequential()
model.add(Convolution2D(32,(3,3),activation='relu',input_shape=(64,64,3))) 
model.add(MaxPool2D(pool_size=(2,2))) 
model.add(Flatten()) 
model.add(Dense(300,activation='relu')) 
model.add(Dense(150,activation='relu')) 
model.add(Dense(5,activation='softmax'))
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
model.fit_generator(xtrain,
                    steps_per_epoch=len(xtrain),
                    epochs=30,
                    validation_data=xtest,
                    validation_steps=len(xtest))
/tmp/ipykernel_5850/371111531.py:1: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.
  model.fit_generator(xtrain,
Epoch 1/30
44/44 [==============================] - 12s 273ms/step - loss: 1.4680 - accuracy: 0.4058 - val_loss: 1.0450 - val_accuracy: 0.3704
Epoch 2/30
44/44 [==============================] - 14s 317ms/step - loss: 1.1067 - accuracy: 0.5527 - val_loss: 1.0041 - val_accuracy: 0.6296
Epoch 3/30
44/44 [==============================] - 14s 322ms/step - loss: 1.0130 - accuracy: 0.5997 - val_loss: 0.7982 - val_accuracy: 0.6296
Epoch 4/30
44/44 [==============================] - 17s 382ms/step - loss: 0.9442 - accuracy: 0.6328 - val_loss: 0.7864 - val_accuracy: 0.7037
Epoch 5/30
44/44 [==============================] - 15s 332ms/step - loss: 0.8792 - accuracy: 0.6623 - val_loss: 0.9963 - val_accuracy: 0.7778
Epoch 6/30
44/44 [==============================] - 18s 404ms/step - loss: 0.8547 - accuracy: 0.6690 - val_loss: 0.8110 - val_accuracy: 0.7037
Epoch 7/30
44/44 [==============================] - 16s 350ms/step - loss: 0.7990 - accuracy: 0.7007 - val_loss: 0.6435 - val_accuracy: 0.8148
Epoch 8/30
44/44 [==============================] - 15s 343ms/step - loss: 0.7546 - accuracy: 0.7142 - val_loss: 0.7294 - val_accuracy: 0.7407
Epoch 9/30
44/44 [==============================] - 18s 396ms/step - loss: 0.7123 - accuracy: 0.7313 - val_loss: 0.6709 - val_accuracy: 0.7778
Epoch 10/30
44/44 [==============================] - 18s 407ms/step - loss: 0.6852 - accuracy: 0.7438 - val_loss: 0.6060 - val_accuracy: 0.7778
Epoch 11/30
44/44 [==============================] - 15s 334ms/step - loss: 0.6674 - accuracy: 0.7417 - val_loss: 0.6927 - val_accuracy: 0.6667
Epoch 12/30
44/44 [==============================] - 17s 378ms/step - loss: 0.6334 - accuracy: 0.7670 - val_loss: 0.6090 - val_accuracy: 0.7778
Epoch 13/30
44/44 [==============================] - 15s 338ms/step - loss: 0.6083 - accuracy: 0.7714 - val_loss: 0.4950 - val_accuracy: 0.8519
Epoch 14/30
44/44 [==============================] - 17s 377ms/step - loss: 0.5675 - accuracy: 0.7855 - val_loss: 0.4593 - val_accuracy: 0.8519
Epoch 15/30
44/44 [==============================] - 15s 347ms/step - loss: 0.5539 - accuracy: 0.7890 - val_loss: 0.5288 - val_accuracy: 0.8519
Epoch 16/30
44/44 [==============================] - 15s 334ms/step - loss: 0.5261 - accuracy: 0.8043 - val_loss: 0.4308 - val_accuracy: 0.8889
Epoch 17/30
44/44 [==============================] - 16s 375ms/step - loss: 0.4869 - accuracy: 0.8205 - val_loss: 0.6826 - val_accuracy: 0.8148
Epoch 18/30
44/44 [==============================] - 15s 333ms/step - loss: 0.4781 - accuracy: 0.8274 - val_loss: 0.4648 - val_accuracy: 0.8148
Epoch 19/30
44/44 [==============================] - 15s 344ms/step - loss: 0.4325 - accuracy: 0.8453 - val_loss: 0.2542 - val_accuracy: 0.8889
Epoch 20/30
44/44 [==============================] - 14s 306ms/step - loss: 0.4402 - accuracy: 0.8404 - val_loss: 0.2697 - val_accuracy: 0.9259
Epoch 21/30
44/44 [==============================] - 15s 348ms/step - loss: 0.4141 - accuracy: 0.8531 - val_loss: 0.3391 - val_accuracy: 0.7778
Epoch 22/30
44/44 [==============================] - 16s 375ms/step - loss: 0.4195 - accuracy: 0.8527 - val_loss: 0.3712 - val_accuracy: 0.8148
Epoch 23/30
44/44 [==============================] - 16s 357ms/step - loss: 0.3524 - accuracy: 0.8816 - val_loss: 0.3969 - val_accuracy: 0.8519
Epoch 24/30
44/44 [==============================] - 17s 400ms/step - loss: 0.3484 - accuracy: 0.8747 - val_loss: 0.5674 - val_accuracy: 0.8148
Epoch 25/30
44/44 [==============================] - 14s 321ms/step - loss: 0.3002 - accuracy: 0.8976 - val_loss: 0.4071 - val_accuracy: 0.8519
Epoch 26/30
44/44 [==============================] - 13s 299ms/step - loss: 0.2927 - accuracy: 0.8967 - val_loss: 0.2987 - val_accuracy: 0.8519
Epoch 27/30
44/44 [==============================] - 14s 320ms/step - loss: 0.3122 - accuracy: 0.8837 - val_loss: 0.1558 - val_accuracy: 0.9630
Epoch 28/30
44/44 [==============================] - 15s 340ms/step - loss: 0.2895 - accuracy: 0.8983 - val_loss: 0.2189 - val_accuracy: 0.8889
Epoch 29/30
44/44 [==============================] - 15s 351ms/step - loss: 0.2702 - accuracy: 0.9092 - val_loss: 0.3741 - val_accuracy: 0.8148
Epoch 30/30
44/44 [==============================] - 13s 302ms/step - loss: 0.2515 - accuracy: 0.9168 - val_loss: 0.1828 - val_accuracy: 0.8889
<keras.callbacks.History at 0x7f80dc1ab520>
model.save('flower.h5')
model_json=model.to_json()
with open("model-bw.json","w") as json_file:json_file.write(model_j
